function getAns() {
  switch (whichPuz) {
    case 0:
      //Buzz Buzz
      ansKey = [
        [1,0,0,0,0],
        [0,1,1,0,0],
        [0,1,1,1,1],
        [1,0,1,1,0],
        [1,0,1,1,0]];
      break;
    case 1:
      //Ness (Lost Underworld)
      ansKey = [
        [0,1,0,0,0],
        [0,1,1,0,0],
        [1,0,0,1,0],
        [1,0,0,0,0],
        [1,0,1,1,1]];
      break;
    case 2:
      //Venus
      ansKey = [
        [1,1,1,1,0,1,1,1,1,1],
        [1,1,1,1,1,1,0,1,1,1],
        [1,1,1,0,0,0,0,0,1,1],
        [1,1,1,1,1,0,0,0,0,1],
        [1,1,0,0,0,0,0,0,0,1],
        [1,1,0,0,0,1,0,1,0,0],
        [1,1,0,0,0,0,0,0,0,1],
        [1,1,1,1,1,0,0,0,0,1],
        [1,1,0,0,0,0,0,0,1,0],
        [0,1,1,1,1,0,0,1,0,1]];
      break;
    case 3:
      //Phone
      ansKey = [
        [0,0,1,1,0,0,1,1,1,0],
        [0,1,0,1,0,1,1,0,1,1],
        [0,1,1,0,1,1,1,0,1,1],
        [0,1,0,1,1,0,1,0,1,1],
        [0,1,1,1,1,0,1,0,1,1],
        [0,1,0,1,0,0,1,0,1,1],
        [0,1,0,1,0,0,1,0,1,1],
        [0,1,0,1,1,0,1,1,1,1],
        [0,1,1,1,1,1,1,1,1,1],
        [0,1,0,1,0,1,1,1,1,1]];
      break;
    case 4:
      //Bubble Monkey
      ansKey = [
        [0,0,0,1,1,1,1,1,1,0],
        [0,0,1,1,1,1,1,1,1,1],
        [0,1,1,1,0,1,0,0,0,1],
        [0,1,1,0,0,0,0,0,0,0],
        [1,1,1,0,0,0,0,1,1,1],
        [1,1,0,0,1,1,0,0,1,0],
        [1,1,0,0,0,0,1,0,1,0],
        [1,1,0,0,1,1,0,0,1,0],
        [1,1,1,0,0,0,0,1,1,1],
        [0,1,1,0,0,0,0,0,0,0]];
      break;
    case 5:
      //Everdred
      ansKey = [
        [0,0,0,0,0,0,0,0,1,1,1,1,1,0,1],
        [0,0,1,1,0,0,1,1,1,1,1,1,1,1,0],
        [0,0,1,1,0,1,1,0,0,1,1,1,1,1,0],
        [0,0,1,1,1,1,1,1,0,0,0,1,1,0,0],
        [1,1,1,1,1,0,1,0,0,0,1,1,1,1,0],
        [1,1,1,1,1,1,0,1,0,0,1,1,1,1,0],
        [1,1,1,1,1,1,1,1,0,1,1,0,0,1,1],
        [1,1,1,1,1,0,1,0,0,0,1,0,0,1,0],
        [1,1,1,1,1,1,0,1,0,1,1,0,0,1,1],
        [1,1,1,1,1,1,1,1,0,0,1,1,1,1,0],
        [1,1,1,1,1,0,1,0,0,0,1,1,1,1,0],
        [0,0,1,1,1,1,1,1,0,0,0,1,1,0,0],
        [0,0,1,1,0,1,1,0,0,1,1,1,1,0,0],
        [0,0,1,1,0,0,1,1,1,1,1,1,1,1,0],
        [0,0,0,0,0,0,0,0,0,1,1,1,1,0,1]];
      break;
    case 6:
      //Flower
      ansKey = [
        [0,0,1,1,1,0,1,1,1,0,0,0,0,0,0],
        [0,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
        [0,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
        [0,1,1,1,0,0,0,1,1,1,0,0,0,0,1],
        [1,1,1,0,0,1,0,0,1,1,1,0,0,1,1],
        [1,1,1,0,1,0,1,0,1,1,1,0,0,1,1],
        [1,1,1,0,0,0,1,0,1,1,1,1,1,1,1],
        [1,1,1,0,1,0,1,0,1,1,1,1,1,1,1],
        [1,1,1,0,0,0,1,0,1,1,1,0,0,1,1],
        [1,1,1,0,0,1,0,0,1,1,1,0,0,1,1],
        [0,1,1,1,0,0,0,1,1,1,0,0,0,0,1],
        [0,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
        [0,1,1,1,1,1,1,1,1,1,0,0,0,0,0],
        [0,0,1,1,1,0,1,1,1,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]];
      break;
    case 7:
      //Present
      ansKey = [
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,0],
        [0,0,0,1,0,1,0,0,0,0,0,0,1,1,0],
        [0,0,0,1,0,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,0,1,0,1,0,0,0,0,0,0,1,1],
        [1,0,1,1,1,0,1,1,1,1,1,1,1,1,1],
        [0,1,0,1,0,1,0,1,0,0,0,0,0,0,1],
        [0,1,0,1,0,1,0,0,1,0,0,0,0,0,0],
        [0,1,1,1,1,0,0,0,1,1,1,1,1,1,1],
        [0,1,0,1,0,1,0,0,1,0,0,0,0,0,0],
        [1,0,0,1,1,1,0,1,0,0,0,0,0,0,1],
        [1,0,1,1,0,0,1,1,0,0,0,0,0,0,1],
        [1,1,1,0,1,0,1,1,1,1,1,1,1,1,1],
        [0,0,1,0,1,0,1,0,0,0,0,0,0,1,1],
        [0,0,0,1,0,1,1,1,1,1,1,1,1,1,1],
        [0,0,0,1,0,1,0,0,0,0,0,0,1,1,0]];
      break;
    case 8:
      //Biker Punk
      ansKey = [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
        [0,0,0,0,0,0,1,1,0,0,0,0,1,0,0],
        [0,0,0,0,0,1,0,0,1,1,0,1,0,0,1],
        [0,0,1,1,1,1,0,1,1,0,0,1,0,1,1],
        [0,1,1,0,0,1,0,1,1,1,1,1,1,1,1],
        [1,1,0,0,0,1,0,0,0,0,1,1,1,1,1],
        [1,1,0,0,1,1,1,0,1,0,0,0,1,1,1],
        [1,1,1,0,1,1,1,0,0,1,1,0,1,0,1],
        [1,1,1,0,0,1,0,0,0,1,0,0,1,1,1],
        [1,1,0,0,1,1,1,0,0,1,1,0,1,0,1],
        [1,1,0,0,1,1,1,0,1,0,0,0,1,1,1],
        [1,1,1,0,0,1,0,0,0,0,1,1,1,1,1],
        [0,1,1,1,0,1,0,1,1,1,1,1,1,1,1],
        [0,0,1,1,1,1,0,1,1,0,0,1,0,1,0],
        [0,0,0,0,0,1,0,1,1,1,0,1,0,0,0]];
      break;
    case 9:
      //Evil Mushroom
      ansKey = [
        [0,0,0,0,1,1,0,0,0,0,0,0,0,0,0],
        [0,0,0,1,0,0,1,0,0,0,0,0,0,1,0],
        [0,0,1,1,1,0,1,0,0,0,1,1,1,1,0],
        [0,1,0,1,1,1,1,0,0,0,1,0,0,1,1],
        [0,1,0,1,1,1,1,1,0,0,0,1,0,1,1],
        [1,1,1,1,1,1,1,1,0,0,1,0,1,1,1],
        [1,1,1,1,1,1,1,0,1,1,0,1,1,1,1],
        [1,1,1,0,0,1,1,0,0,0,0,1,0,1,1],
        [1,1,1,0,0,1,1,0,1,1,0,1,0,1,1],
        [1,0,1,1,1,1,1,1,0,0,1,0,1,1,1],
        [0,1,1,1,1,1,1,1,0,1,0,1,1,1,1],
        [0,1,1,0,1,1,1,0,0,1,0,0,0,1,1],
        [0,0,1,0,0,1,1,0,0,0,1,1,1,1,1],
        [0,0,0,1,1,1,1,0,0,0,0,0,0,1,0],
        [0,0,0,0,1,1,0,0,0,0,0,0,0,1,0],
        [0,0,0,0,0,1,0,1,1,1,0,1,0,0,0]];
      break;
  }
}

function getClues(type){
 for(let x=0;x<sNum;x++){
  for(let y=0;y<sNum;y++){
   
    if (type==0){
    if(ansKey[x][y]==1){
     clueNum++;
    }else if(clueNum>0){
      clue.push(clueNum);
      clueNum=0;
    }
      
   }else{
    if(ansKey[y][x]==1){
     clueNum++;
    }else if(clueNum>0){
      clue.push(clueNum);
      clueNum=0;
    }
   }
    
    if(y==sNum-1 && clueNum>0){
      clue.push(clueNum);
      while(clue.length<clueMax){
      clue.splice(0,0,0);
      } 
     } else if(y==sNum-1){
      while(clue.length<clueMax){
      clue.splice(0,0,0);
      }
    }
  }
   if (type==0){
   cluesCol.push(clue);
   }else{
   cluesRow.push(clue); 
   }
  clue=[];
  clueNum=0;
 }
}

 function checkAns(){
  for(let y=0;y<sNum;y++){
  for(let x=0;x<sNum;x++){
    if(fillTrue[x][y]==ansKey[y][x]){
    pts++;
    }
  }    
  }
  if(pts>=sNum*sNum){
    mode=4;
    cooldown=0;
    setTimeout(puzSolved2On,4000);
    setTimeout(keysPuzSolvedOn,8000);
    summersMusic.stop();
    winSound.play();
    wingraphictint=0;
    isSolved[whichPuz]=1;
  }else{
    pts=0;
  }
 }

function puzSolved2On(){
  solvedimgshow=1;
  wingraphictint=0;
  winMusic.loop();
}

function keysPuzSolvedOn(){
 backtomenu=1;
}
